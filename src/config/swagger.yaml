openapi: 3.0.0
info:
  title: MEN API - Manageable Kanban
  description: MongoDB ExpressJS NodeJS REST API Typescript
  version: 1.0.0
servers:
  - url: http://localhost:4000/api/
    description: Localhost development server
  - url: https://api.neon-dev.dk/api/
    description: Deployed production server
components:
  securitySchemes:
    ApiKeyAuth: # arbitrary name for the security scheme
      type: apiKey
      in: header # can be "header", "query" or "cookie"
      name: auth-token

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
        birthdate:
          type: string
          format: date-time
        profilePicture:
          type: string
        bio:
          type: string
        teams:
          type: array
          items:
            type: string
        tasks:
          type: array
          items:
            type: string
        refreshToken:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - firstName
        - lastName
        - email
        - password
        - birthdate
        - teams
        - tasks

    Team:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        picture:
          type: string
        users:
          type: array
          items:
            type: string
        projects:
          type: array
          items:
            type: string
        isDeleted:
          type: boolean
        createdBy:
          type: string
        deletedAt:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - name
        - createdBy
        - users
        - isDeleted
        - createdAt
        - updatedAt

    Project:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        techStack:
          type: array
          items:
            type: string
        status:
          type: array
          items:
            type: number
            enum: [0, 1, 2, 3]
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        teamId:
          type: string
        columns:
          type: array
          items:
            $ref: "#/components/schemas/Column"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        isDeleted:
          type: boolean
        deletedAt:
          type: string
          format: date-time
      required:
        - id
        - name
        - techStack
        - status
        - startDate
        - endDate
        - columns
        - teamId
        - createdAt
        - updatedAt
        - isDeleted

    Label:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        color:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - name
        - color
        - createdAt
        - updatedAt

    Task:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        picture:
          type: string
        columnId:
          type: string
        projectId:
          type: string
        userIds:
          type: array
          items:
            type: string
        labels:
          type: array
          items:
            $ref: "#/components/schemas/Label"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - title
        - startDate
        - endDate
        - columnId
        - projectId
        - userIds
        - createdAt
        - updatedAt

    Column:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        tasks:
          type: array
          items:
            $ref: "#/components/schemas/Task"
        order:
          type: number
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - name
        - tasks
        - order
        - createdAt
        - updatedAt

    ICreateLoginDTO:
      type: object
      properties:
        email:
          type: string
          format: email
          minLength: 6
          maxLength: 255
        password:
          type: string
          minLength: 6
          maxLength: 255
      required:
        - email
        - password

    ICreateUserDTO:
      type: object
      properties:
        firstName:
          type: string
          minLength: 3
          maxLength: 255
        lastName:
          type: string
          minLength: 3
          maxLength: 255
        email:
          type: string
          format: email
          minLength: 6
          maxLength: 255
        password:
          type: string
          minLength: 6
          maxLength: 255
        birthdate:
          type: string
          format: date-time
      required:
        - firstName
        - lastName
        - email
        - password
        - birthdate

    IUpdateUserDTO:
      type: object
      properties:
        firstName:
          type: string
          minLength: 3
          maxLength: 255
        lastName:
          type: string
          minLength: 3
          maxLength: 255
        bio:
          type: string
          minLength: 6
          maxLength: 1024
        birthdate:
          type: string
          format: date-time

    IUpdateUserRefreshToken:
      type: object
      properties:
        refreshToken:
          type: string

    ICreateTeamDTO:
      type: object
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 255
        description:
          type: string
          minLength: 3
          maxLength: 1056
      required:
        - name
        - description

    IUpdateTeamDTO:
      type: object
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 255
        description:
          type: string
          minLength: 3
          maxLength: 1056
      required:
        - name

    IUpdateTeamProjectsDTO:
      type: object
      properties:
        projects:
          type: array
          items:
            type: string
          minItems: 1
          maxItems: 200
      required:
        - projects

    IUpdateTeamUsersDTO:
      type: object
      properties:
        users:
          type: array
          items:
            type: string
          minItems: 1
          maxItems: 20
      required:
        - users

    ICreateProjectDTO:
      type: object
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 255
        description:
          type: string
          minLength: 3
          maxLength: 255
        techStack:
          type: array
          items:
            type: string
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        teamId:
          type: string
      required:
        - name
        - techStack
        - startDate
        - endDate
        - teamId

    IUpdateProjectDTO:
      type: object
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 255
        description:
          type: string
          minLength: 3
          maxLength: 255
        techStack:
          type: array
          items:
            type: string
        endDate:
          type: string
          format: date-time

    ICreateColumnDTO:
      type: object
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 255
      required:
        - name

    IUpdateColumnDTO:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
          minLength: 2
          maxLength: 255
      required:
        - id
        - name

    IUpdateColumnOrderDTO:
      type: object
      properties:
        columnId:
          type: string
        order:
          type: number
          minLength: 0
          maxLength: 300
      required:
        - columnId
        - order

    ICreateTaskDTO:
      type: object
      properties:
        title:
          type: string
          minLength: 2
          maxLength: 255
        description:
          type: string
          minLength: 3
          maxLength: 1056
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        columnId:
          type: string
      required:
        - title
        - startDate
        - endDate
        - columnId

    IUpdateTaskDTO:
      type: object
      properties:
        title:
          type: string
          minLength: 2
          maxLength: 255
        description:
          type: string
          minLength: 3
          maxLength: 1056
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time

    IUpdateTaskOrderDTO:
      type: object
      properties:
        columnId:
          type: string
        projectId:
          type: string
        tasks:
          type: array
          items:
            type: string
      required:
        - columnId
        - projectId
        - tasks

    IUpdateUserToTask:
      type: object
      properties:
        userId:
          type: string
      required:
        - userId

    ICreateLabelDTO:
      type: object
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 255
        color:
          type: string
          minLength: 3
          maxLength: 24
      required:
        - name
        - color

paths:
  /auth/register:
    post:
      summary: Registers a new User
      description: Register a new User in the database
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ICreateUserDTO"

      responses:
        200:
          description: User created succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  data:
                    type: array
                    items:
                      type: string

  /auth/login:
    post:
      summary: Signs in a User
      description: Login a User in order to get JWT token (auth-token)
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ICreateLoginDTO"

      responses:
        200:
          description: User logged in succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string

  /auth/logout:
    get:
      summary: Logs User out
      description: Removes user jwt token cookie
      tags:
        - auth
      responses:
        204:
          description: User logged out succesfully

  /user/{id}:
    get:
      summary: Gets User by id
      description: Get the individual user that exists in the system.
      security:
        - ApiKeyAuth: []
      tags:
        - user
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: string
      responses:
        200:
          description: Requested user
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/User"
    put:
      summary: Updates one user
      description: Update user's personal information. The "teams" property will be removed from the body if included in the payload. The teams property is updated automatically by other endpoints
      security:
        - ApiKeyAuth: []
      tags:
        - user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IUpdateUserDTO"
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success message
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /user/email/{email}:
    get:
      summary: Gets User by email
      description: Get the individual user that exists in the system.
      security:
        - ApiKeyAuth: []
      tags:
        - user
      parameters:
        - name: email
          in: path
          description: Users email
          required: true
          schema:
            type: string

      responses:
        200:
          description: Requested user
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/User"

  /user/team/{teamId}:
    get:
      summary: Gets Users by Team ID
      description: Get users that exists in the system.
      security:
        - ApiKeyAuth: []
      tags:
        - user
      parameters:
        - name: teamId
          in: path
          description: Users teamId
          required: true
          schema:
            type: string

      responses:
        200:
          description: Requested users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"

  /user/profile:
    get:
      summary: Gets Logged in user
      description: Full information about the logged in user based on the accessToken
      security:
        - ApiKeyAuth: []
      tags:
        - user
      responses:
        200:
          description: Requested user
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/User"
  /team:
    get:
      summary: Gets all teams
      description: Returns all teams of the logged in user. It includes teams created by the user and the ones they are a member of. This endpoint only returns teams which were not marked as deleted.
      security:
        - ApiKeyAuth: []
      tags:
        - team
      responses:
        200:
          description: Array of teams which have not been marked as deleted.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Team"
    post:
      summary: Creates a new team
      description: Add a new team for the logged in user.
      security:
        - ApiKeyAuth: []
      tags:
        - team
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: "#/components/schemas/ICreateTeamDTO"
      responses:
        200:
          description: New team with the current logged in user as the creator and only member right now
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/Team"

  /team/{id}:
    get:
      summary: Gets a Team by id
      description: Returns an individual team that exists in the system and is related to the logged in user. Only teams the user is a member or a creator is valid to be fetched by id.
      security:
        - ApiKeyAuth: []
      tags:
        - team
      parameters:
        - name: id
          in: path
          description: Team ID
          required: true
          schema:
            type: string
      responses:
        200:
          description: Single requested Team.
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/Team"
    put:
      summary: Updates one team
      description: Update team's details. User's assigned to this team won't be updated through this endpoint so the property will have no effect
      security:
        - ApiKeyAuth: []
      tags:
        - team
      parameters:
        - name: id
          in: path
          description: Team ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IUpdateTeamDTO"
      responses:
        200:
          description: Updated team
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
    delete:
      summary: Soft deletes a team
      description: Marks a team as deleted thus it will not be included in get endpoints responses anymore. Logged in user can only delete teams created by themselved and only if there have more than one teams they belong to at the moment.
      security:
        - ApiKeyAuth: []
      tags:
        - team
      parameters:
        - name: id
          in: path
          description: Team ID
          required: true
          schema:
            type: string
      responses:
        200:
          description: Soft deleted the team
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /team/{id}/UpdateMembers:
    put:
      summary: Updates team members
      description: Remove or add team members. The team's "users" new value will be exactly the same array you send in the payload. Removing the creator or sending an empty array is not allowed.
      security:
        - ApiKeyAuth: []
      tags:
        - team
      parameters:
        - name: id
          in: path
          description: Team ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IUpdateTeamUsersDTO"
      responses:
        200:
          description: Updated team
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /project:
    post:
      summary: Creates a new Project
      description: Add a new Project.
      security:
        - ApiKeyAuth: []
      tags:
        - project
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: "#/components/schemas/ICreateProjectDTO"
      responses:
        200:
          description: New Project
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/Project"

  /project/user:
    get:
      summary: Gets all user projects
      description: All projects that the user can access.
      security:
        - ApiKeyAuth: []
      tags:
        - project

      responses:
        200:
          description: All projects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Project"

  /project/{projectId}:
    get:
      summary: Get project by id
      description: One project and all it's information.
      security:
        - ApiKeyAuth: []
      tags:
        - project
      parameters:
        - name: projectId
          in: path
          description: Project ID
          required: true
          schema:
            type: string

      responses:
        200:
          description: One project
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/Project"
    put:
      summary: Update one project
      description: Updates projects basic information
      security:
        - ApiKeyAuth: []
      tags:
        - project
      parameters:
        - name: projectId
          in: path
          description: Project ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: "#/components/schemas/IUpdateProjectDTO"
      responses:
        200:
          description: Updated project
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
    delete:
      summary: Soft deleted a project
      description: Updated projects IsDeleted property to true thus making it not fetchable
      security:
        - ApiKeyAuth: []
      tags:
        - project
      parameters:
        - name: projectId
          in: path
          description: Project ID
          required: true
          schema:
            type: string
      responses:
        200:
          description: Deleted project
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /project/overview/{teamId}:
    get:
      summary: Get all projects for a team
      description: List of projects by team id
      security:
        - ApiKeyAuth: []
      tags:
        - project
      parameters:
        - name: teamId
          in: path
          description: Team ID
          required: true
          schema:
            type: string

      responses:
        200:
          description: One project
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/Project"

  /project/{projectId}/AddColumn:
    put:
      summary: New kanban column
      description: Creates a new kanban column on the project
      security:
        - ApiKeyAuth: []
      tags:
        - project
      parameters:
        - name: projectId
          in: path
          description: Project ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: "#/components/schemas/ICreateColumnDTO"
      responses:
        200:
          description: Updated project
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /project/{projectId}/DeleteColumn/{columnId}:
    put:
      summary: Removes a column
      description: Removes a column from the projects kanban
      security:
        - ApiKeyAuth: []
      tags:
        - project
      parameters:
        - name: projectId
          in: path
          description: Project ID
          required: true
          schema:
            type: string
        - name: columnId
          in: path
          description: Column ID
          required: true
          schema:
            type: string
      responses:
        200:
          description: Updated project
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /project/{projectId}/ChangeColumnOrder:
    put:
      summary: Updates order of columns
      description: Updates the order of columns on the project
      security:
        - ApiKeyAuth: []
      tags:
        - project
      parameters:
        - name: projectId
          in: path
          description: Project ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: "#/components/schemas/IUpdateColumnOrderDTO"
      responses:
        200:
          description: Updated project
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /project/{projectId}/column:
    put:
      summary: Updates a column on the project
      description: Update one columns basic information
      security:
        - ApiKeyAuth: []
      tags:
        - project
      parameters:
        - name: projectId
          in: path
          description: Project ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: "#/components/schemas/IUpdateColumnDTO"
      responses:
        200:
          description: Updated project
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /project/{projectId}/complete:
    put:
      summary: Complete a project
      description: Update the projects status to Completed
      security:
        - ApiKeyAuth: []
      tags:
        - project
      parameters:
        - name: projectId
          in: path
          description: Project ID
          required: true
          schema:
            type: string
      responses:
        200:
          description: Updated project
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /token/refresh:
    get:
      summary: New refresh token
      description: Updates users refresh token with a new one and sends back a new acessToken
      security:
        - ApiKeyAuth: []
      tags:
        - token
      responses:
        200:
          description: new Access token
          content:
            application/json:
              schema:
                type: object
                properties:
                  newAccessToken:
                    type: string

  /task/project/{projectId}:
    get:
      summary: All tasks by project ID
      description: Gets all tasks from all columns on a project
      security:
        - ApiKeyAuth: []
      tags:
        - task
      parameters:
        - name: projectId
          in: path
          description: Project ID
          required: true
          schema:
            type: string
      responses:
        200:
          description: All tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Task"
    post:
      summary: Create one Task
      description: Creates a new task on a project
      security:
        - ApiKeyAuth: []
      tags:
        - task
      parameters:
        - name: projectId
          in: path
          description: Project ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: "#/components/schemas/ICreateTaskDTO"
      responses:
        200:
          description: New Task
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/Task"

  /task/{projectId}/column/{columnId}:
    get:
      summary: All tasks on the specific column of a Project
      description: Gets all tasks from one columns on a project
      security:
        - ApiKeyAuth: []
      tags:
        - task
      parameters:
        - name: projectId
          in: path
          description: Project ID
          required: true
          schema:
            type: string
        - name: columnId
          in: path
          description: Column ID
          required: true
          schema:
            type: string
      responses:
        200:
          description: All tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Task"

  /task/user:
    get:
      summary: All user tasks
      description: Gets all tasks the user is assigned to
      security:
        - ApiKeyAuth: []
      tags:
        - task
      responses:
        200:
          description: All tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Task"

  /task/{taskId}:
    get:
      summary: Task by ID
      description: Gets one task by ID
      security:
        - ApiKeyAuth: []
      tags:
        - task
      parameters:
        - name: taskId
          in: path
          description: Task ID
          required: true
          schema:
            type: string
      responses:
        200:
          description: One task
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/Task"

    put:
      summary: Update one Task
      description: Update a Task's basic information
      security:
        - ApiKeyAuth: []
      tags:
        - task
      parameters:
        - name: taskId
          in: path
          description: Task ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: "#/components/schemas/IUpdateTaskDTO"
      responses:
        200:
          description: Updated a task
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
    delete:
      summary: Deletes One Task
      description: Hard deletes a task and all its relations to other entities
      security:
        - ApiKeyAuth: []
      tags:
        - task
      parameters:
        - name: taskId
          in: path
          description: Task ID
          required: true
          schema:
            type: string
      responses:
        200:
          description: Deleted a task
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /task/column/order:
    put:
      summary: Updates the task order
      description: Updates the order of tasks on a column
      security:
        - ApiKeyAuth: []
      tags:
        - task
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: "#/components/schemas/IUpdateTaskOrderDTO"
      responses:
        200:
          description: Updated tasks order
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /task/{taskId}/AddUser:
    put:
      summary: Add user to task
      description: Adds one user to a task
      security:
        - ApiKeyAuth: []
      tags:
        - task
      parameters:
        - name: taskId
          in: path
          description: Task ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: "#/components/schemas/IUpdateUserToTask"
      responses:
        200:
          description: Updated a task
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /task/{taskId}/RemoveUser:
    put:
      summary: Remove user from task
      description: Removes one user from a task
      security:
        - ApiKeyAuth: []
      tags:
        - task
      parameters:
        - name: taskId
          in: path
          description: Task ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: "#/components/schemas/IUpdateUserToTask"
      responses:
        200:
          description: Updated a task
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /task/{taskId}/AddLabel:
    put:
      summary: Add a label to a task
      description: Creates a new label and adds it to the tasks label array
      security:
        - ApiKeyAuth: []
      tags:
        - task
      parameters:
        - name: taskId
          in: path
          description: Task ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: "#/components/schemas/ICreateLabelDTO"
      responses:
        200:
          description: Updated a task
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /task/{taskId}/RemoveLabel/{labelId}:
    put:
      summary: Remove a label to a task
      description: Creates a new label and adds it to the tasks label array
      security:
        - ApiKeyAuth: []
      tags:
        - task
      parameters:
        - name: taskId
          in: path
          description: Task ID
          required: true
          schema:
            type: string
        - name: labelId
          in: path
          description: Label ID
          required: true
          schema:
            type: string
      responses:
        200:
          description: Updated a task
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
