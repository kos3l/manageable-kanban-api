openapi: 3.0.0
info:
  title: MEN REST API - Events
  description: MongoDB ExpressJS NodeJS REST API Typescript
  version: 1.0.0
servers:
  - url: http://localhost:4000/api/
    description: Localhost development server
components:
  securitySchemes:
    ApiKeyAuth: # arbitrary name for the security scheme
      type: apiKey
      in: header # can be "header", "query" or "cookie"
      name: auth-token

  schemas:
    Event:
      type: object
      properties:
        _id:
          type: string
        title:
          type: string
        description:
          type: string
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        address:
          type: string
        isArchived:
          type: boolean
        createdBy:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    User:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
        birthdate:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    ICreateLoginDTO:
      type: object
      properties:
        email:
          type: string
          format: email
          minLength: 6
          maxLength: 255
        password:
          type: string
          minLength: 6
          maxLength: 255

    ICreateUserDTO:
      type: object
      properties:
        firstName:
          type: string
          minLength: 3
          maxLength: 255
        lastName:
          type: string
          minLength: 3
          maxLength: 255
        email:
          type: string
          format: email
          minLength: 6
          maxLength: 255
        password:
          type: string
          minLength: 6
          maxLength: 255
        birthdate:
          type: string
          format: date-time

    ICreateEventDTO:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        address:
          type: string

    IUpdateEventDTO:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        address:
          type: string

paths:
  /user/register:
    post:
      summary: Register a new User
      description: Register a new User in the database
      tags:
        - user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ICreateUserDTO"

      responses:
        201:
          description: User created succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  _id:
                    type: string

  /user/login:
    post:
      summary: Login a User
      description: Login a User in order to get JWT token (auth-token)
      tags:
        - user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ICreateLoginDTO"

      responses:
        200:
          description: User logged in succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  data:
                    type: string

  /event:
    get:
      summary: Retrieves a list of Events
      description: Retrieves a list of Events as JSON objects.
      tags:
        - event
      security:
        - ApiKeyAuth: []
      parameters:
        - in: query
          name: isArchived
          description: This way you can fetch events that are either in the past or in the future.
          schema:
            type: boolean
          required: false
      responses:
        200:
          description: A list of event JSON objects in an array.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Event"

    post:
      summary: Create a new Event
      description: Create a new Event
      tags:
        - event
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/ICreateEventDTO"

      responses:
        201:
          description: Event created succesfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Event"
  /event/date/{date}:
    get:
      summary: Retrieves a list of Events for a period of either a week/month/year by a date
      description: Retrieves a list of Events for a period of either a week/month/year by a date
      tags:
        - event
      security:
        - ApiKeyAuth: []
      parameters:
        - in: path
          name: date
          required: true
          description: Selected date
          schema:
            type: string
            format: date
        - in: query
          name: datePrecision
          description: Description of by which time period, you want to fetch the events
          schema:
            type: string
            enum: [week, month, year]
          required: false
      responses:
        200:
          description: A list of event JSON objects in an array.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Event"

  /event/{id}:
    get:
      summary: Specific Event
      description: Retrieves a specific Event based on it id.
      tags:
        - event
      security:
        - ApiKeyAuth: []
      parameters:
        - in: path
          name: id
          required: true
          description: MongoDB id
          schema:
            type: string
      responses:
        200:
          description: A Event in the format of a JSON object.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Event"

    put:
      summary: Updates a specific Event
      description: Updates a specific Event based on it id
      tags:
        - event
      security:
        - ApiKeyAuth: []
      parameters:
        - in: path
          name: id
          required: true
          description: MongoDB id
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IUpdateEventDTO"

      responses:
        201:
          description: Event updated succesfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Event"

    delete:
      summary: Deletes a specific Event
      description: Deletes a specific Event based on it id
      tags:
        - event
      security:
        - ApiKeyAuth: []
      parameters:
        - in: path
          name: id
          required: true
          description: MongoDB id
          schema:
            type: string

      responses:
        201:
          description: Event deleted succesfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Event"

  /event/archive:
    put:
      summary: Archives events that are in the past
      description: Should be run daily at midnight to archive all old events
      tags:
        - event
      security:
        - ApiKeyAuth: []

      responses:
        204:
          description: The resources were successfully updated.
